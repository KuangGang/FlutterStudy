// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_study/models/json_test_model.dart';
import 'package:flutter_study/generated/json/json_test_model_helper.dart';
import 'package:flutter_study/models/ebook_list_model.dart';
import 'package:flutter_study/generated/json/ebook_list_model_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case JsonTestModel:
			return jsonTestModelFromJson(data as JsonTestModel, json) as T;			case JsonTestList:
			return jsonTestListFromJson(data as JsonTestList, json) as T;			case JsonTestListSub:
			return jsonTestListSubFromJson(data as JsonTestListSub, json) as T;			case JsonTestListSubUserInfo:
			return jsonTestListSubUserInfoFromJson(data as JsonTestListSubUserInfo, json) as T;			case JsonTestListInfo:
			return jsonTestListInfoFromJson(data as JsonTestListInfo, json) as T;			case JsonTestListInfoUserInfo:
			return jsonTestListInfoUserInfoFromJson(data as JsonTestListInfoUserInfo, json) as T;			case EbookListModel:
			return ebookListModelFromJson(data as EbookListModel, json) as T;			case EbookListData:
			return ebookListDataFromJson(data as EbookListData, json) as T;			case EbookListDataCategoryList:
			return ebookListDataCategoryListFromJson(data as EbookListDataCategoryList, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case JsonTestModel:
			return jsonTestModelToJson(data as JsonTestModel);			case JsonTestList:
			return jsonTestListToJson(data as JsonTestList);			case JsonTestListSub:
			return jsonTestListSubToJson(data as JsonTestListSub);			case JsonTestListSubUserInfo:
			return jsonTestListSubUserInfoToJson(data as JsonTestListSubUserInfo);			case JsonTestListInfo:
			return jsonTestListInfoToJson(data as JsonTestListInfo);			case JsonTestListInfoUserInfo:
			return jsonTestListInfoUserInfoToJson(data as JsonTestListInfoUserInfo);			case EbookListModel:
			return ebookListModelToJson(data as EbookListModel);			case EbookListData:
			return ebookListDataToJson(data as EbookListData);			case EbookListDataCategoryList:
			return ebookListDataCategoryListToJson(data as EbookListDataCategoryList);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'JsonTestModel':
			return JsonTestModel().fromJson(json);			case 'JsonTestList':
			return JsonTestList().fromJson(json);			case 'JsonTestListSub':
			return JsonTestListSub().fromJson(json);			case 'JsonTestListSubUserInfo':
			return JsonTestListSubUserInfo().fromJson(json);			case 'JsonTestListInfo':
			return JsonTestListInfo().fromJson(json);			case 'JsonTestListInfoUserInfo':
			return JsonTestListInfoUserInfo().fromJson(json);			case 'EbookListModel':
			return EbookListModel().fromJson(json);			case 'EbookListData':
			return EbookListData().fromJson(json);			case 'EbookListDataCategoryList':
			return EbookListDataCategoryList().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'JsonTestModel':
			return List<JsonTestModel>();			case 'JsonTestList':
			return List<JsonTestList>();			case 'JsonTestListSub':
			return List<JsonTestListSub>();			case 'JsonTestListSubUserInfo':
			return List<JsonTestListSubUserInfo>();			case 'JsonTestListInfo':
			return List<JsonTestListInfo>();			case 'JsonTestListInfoUserInfo':
			return List<JsonTestListInfoUserInfo>();			case 'EbookListModel':
			return List<EbookListModel>();			case 'EbookListData':
			return List<EbookListData>();			case 'EbookListDataCategoryList':
			return List<EbookListDataCategoryList>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}